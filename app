MZ       ÿÿ  ¸       @                                   €   º ´	Í!¸LÍ!This program cannot be run in DOS mode.

$       PE  L :üïä        à " 0           ²4       @    @                       €          `…                           ]4  O    @  Œ                   `     Ø3  8                                                             H           .text   ¸                           `.rsrc   Œ   @                    @  @.reloc      `                    @  B                ‘4      H     œ"  Ì      h2  p                                          ^}  (  
  (   *6 r  p(  
&*  0 +      ,{  þ+
, {  o  
  (  
 * 0        s  
}  (  
 {  rW  p"  4As  
o  
 {  8s  
o  
 {  r  po  
 {  4s  
o   
 {  o!  
 {  r‘  po"  
 {  o#  
 {  þ  s$  
o%  
 "  À@"  PAs&  
('  
 ((  
  ò   ns  
()  
 (*  
{  o+  
 (,  
 r©  p(  
 rµ  po"  
 (-  
 *j (.  
 (/  
 s  (0  
 *&(1  
  *0 9      ~  þ
," r»  pÐ  (2  
o3  
s4  
€   ~  + *   0       ~  
+ *" €  *0       ~  
+ *"(5  
 *Vs  (6  
t  €  *  BSJB         v4.0.30319     l   ,  #~  ˜  Œ  #Strings    $  ð   #US 
     #GUID   $
  ¨  #Blob         W¢	   ú3      1               6                                   sà àà Ž® J   Ïÿ Vÿ 7ÿ Çÿ “ÿ ¬ÿ æÿ »Á LÁ ÿ %
 ¦œ zp
 #œ ÜŸ …Ÿ Ÿ Zb q® 1à E  .ê 	p ¢p é Õ É® Z Ÿ
 œ <I ž I ãI 2I  I
 Þ œ UŸ  I
 †œ
 L œƒ   
 Ž œ
 ¼œ ± Ÿ f Ÿ ÿ ô Õ              GA   € —GM      YM     |Yu  
  Ñà   ä  «è  Î ì  8 ð P     †¡  h      Xô  x     Ä   °        ×!    ‘ ·  ò!    ƒ¡  ü!    “Aû  D"    “¶   ["    “Â  d"    –ð {"    †¡  „"    ‘§     :   #   ?   þ	 ¡  ¡  ¡
 ) ¡ 1 ¡ 9 ¡ A ¡ I ¡ Q ¡ Y ¡ a ¡ i ¡ q ¡ y ¡ © ¡ ± ¡ ¹ ¡ Á ¡ á ¡   ¡ ñ A& ù    ‘ ¡ L 	¡0 8= !¡D ÈJ ¨  )¡D 
Q p g 1… 9¡X f^ A¡e I±k IH r  Q y Y'   Š † Z ii iü‘ i*– ™ ¡ qx ¤ q}­ É ¡³ é ¡ ‰+ Å ) › .  .  (.  G. # P. + Z. 3 Z. ; Z. C P. K `. S Z. [ Z. c x. k ¢. s ¯I › ƒ ƒ ƒ ‹ ýƒ “ ý  { ý£ “ ý£ ƒ C, œ » À       E  Ö          	   
  €               G             Î                 Î œ               Î Ÿ               × I             ¸      &       Form1 button1 <Module> SizeF mscorlib Add Synchronized defaultInstance set_AutoScaleMode IDisposable RuntimeTypeHandle GetTypeFromHandle set_FormBorderStyle FontStyle set_Name Type get_Culture set_Culture resourceCulture ButtonBase ApplicationSettingsBase Dispose EditorBrowsableState STAThreadAttribute CompilerGeneratedAttribute GuidAttribute GeneratedCodeAttribute DebuggerNonUserCodeAttribute DebuggableAttribute EditorBrowsableAttribute ComVisibleAttribute AssemblyTitleAttribute AssemblyTrademarkAttribute TargetFrameworkAttribute AssemblyFileVersionAttribute AssemblyConfigurationAttribute AssemblyDescriptionAttribute CompilationRelaxationsAttribute AssemblyProductAttribute AssemblyCopyrightAttribute AssemblyCompanyAttribute RuntimeCompatibilityAttribute value test.exe set_Size set_ClientSize System.Runtime.Versioning disposing System.Drawing button1_Click add_Click System.ComponentModel ContainerControl Program System Form resourceMan Main Application set_Location System.Configuration System.Globalization System.Reflection ControlCollection Button Run CultureInfo sender get_ResourceManager EventHandler System.CodeDom.Compiler IContainer set_UseVisualStyleBackColor .ctor .cctor System.Diagnostics System.Runtime.InteropServices System.Runtime.CompilerServices System.Resources test.Form1.resources test.Properties.Resources.resources DebuggingModes test.Properties EnableVisualStyles Settings EventArgs get_Controls System.Windows.Forms set_AutoScaleDimensions Process components Object GraphicsUnit get_Default SetCompatibleTextRenderingDefault InitializeComponent Point set_Font Start test SuspendLayout ResumeLayout set_Text set_TabIndex get_Assembly    Uh t t p s : / / w w w . y o u t u b e . c o m / s h o r t s / z q n L t h - D j r U )M i c r o s o f t   S a n s   S e r i f  b u t t o n 1  D o   i t   l i v e !  F o r m 1  4 7  3t e s t . P r o p e r t i e s . R e s o u r c e s   4ìÛ×GkG¡ëUÅíCµ         m y €‰€ €…  €‘ €•  €  €¡ €©  €­ € €±    Aee €¹€½  €Á €Ái €Å€Å·z\V4à‰°?_Õ
:EIei Q  e  i i   e i         TWrapNonExceptionThrows     	 test       Copyright Â©  2022  ) $bd5e7fe1-d5f8-4bf4-bbb8-f4ff0ecfabf4   1.0.0.0  M .NETFramework,Version=v4.7.2 TFrameworkDisplayName.NET Framework 4.7.2   @ 3System.Resources.Tools.StronglyTypedResourceBuilder4.0.0.0  Y KMicrosoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator11.0.0.0          ´   ÎÊï¾   ‘   lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet           PADPADP´   ´   ÎÊï¾   ‘   lSystem.Resources.ResourceReader, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089#System.Resources.RuntimeResourceSet           PADPADP´       beñ       M   4                               RSDSb¤™¾w%B¡“pÁbŸÄ   C:\Users\a\source\repos\test\test\obj\Debug\test.pdb …4          Ÿ4                          ‘4            _CorExeMain mscoree.dll        ÿ%  @                                                                                                                                                                                                                                                                                                                                                              €   P  €                  8  €                   €                     h  €                   Œ  @  ü          ü4   V S _ V E R S I O N _ I N F O     ½ïþ                 ?                         D    V a r F i l e I n f o     $    T r a n s l a t i o n       °\   S t r i n g F i l e I n f o   8   0 0 0 0 0 4 b 0      C o m m e n t s       "   C o m p a n y N a m e         2   F i l e D e s c r i p t i o n     t e s t     0   F i l e V e r s i o n     1 . 0 . 0 . 0   2 	  I n t e r n a l N a m e   t e s t . e x e     H   L e g a l C o p y r i g h t   C o p y r i g h t   ©     2 0 2 2   *   L e g a l T r a d e m a r k s         : 	  O r i g i n a l F i l e n a m e   t e s t . e x e     *   P r o d u c t N a m e     t e s t     4   P r o d u c t V e r s i o n   1 . 0 . 0 . 0   8   A s s e m b l y   V e r s i o n   1 . 0 . 0 . 0   œC  ê          ï»¿<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
  <assemblyIdentity version="1.0.0.0" name="MyApplication.app"/>
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
    <security>
      <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
        <requestedExecutionLevel level="asInvoker" uiAccess="false"/>
      </requestedPrivileges>
    </security>
  </trustInfo>
</assembly>                                                                                                                           0     ´4                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
